{"version":3,"sources":["components/ImageViewer.js","components/Abi.js","components/Bytecode.js","components/HomePage.js","components/App.js","serviceWorker.js","index.js"],"names":["ipfsClient","require","config","ipfs","host","port","protocol","apiPath","ImageViewer","props","captureFile","event","console","log","state","image","preventDefault","temp","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","setState","file","description","address","transactionHash","uploadFile","bind","a","ethereum","request","method","provider","providers","Web3Provider","getSigner","signer","getAddress","signersAddress","factory","ContractFactory","attach","metaData","add","this","pin","result","path","image_path","jsonDATA","JSON","parse","stringify","meta","imageURI","tokenURI","mintHexProfilePic","InterPlan721","hash","View","style","flex","alignItems","justifyContent","Button","title","onPress","navigation","navigate","onSubmit","temp_description","value","type","accept","onChange","className","id","placeholder","required","ref","input","href","Component","HomePage","class","App","AppContainer","AppNavigator","createStackNavigator","Home","screen","Image","createAppContainer","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","root","document","getElementById","ReactDOM","render","basename","process","URL","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e07dae21.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {Button, View} from 'react-native';\r\nimport {ContractFactory, providers} from 'ethers';\r\nimport bytecode from './Bytecode.js'; \r\nimport abi from './Abi.js'; \r\nconst ipfsClient = require('ipfs-http-client')\r\nrequire('dotenv').config();\r\nconst ipfs = ipfsClient({host: 'ipfs.infura.io', port: 5001, protocol: 'https', apiPath: '/api/v0'}) \r\n\r\n\r\n\r\nclass ImageViewer extends Component {\r\n\r\n\r\n  async uploadFile () {\r\n\r\n    await window.ethereum.request({method: 'eth_requestAccounts'});\r\n    const provider = new providers.Web3Provider(window.ethereum);\r\n\r\n    const signer = await provider.getSigner()\r\n    const signersAddress = await signer.getAddress()\r\n    console.log(\"Account:\", signersAddress);\r\n\r\n      const factory = new ContractFactory(abi(), bytecode(), signer).attach(\"0xb387FfcF8E181Be41E2573328c8A002597B6B09A\")\r\n      var image_path;\r\n      \r\n      console.log(\"Submitting file to IPFS...\")\r\n      var metaData = '{ ';\r\n      for await (var result of ipfs.add(this.state.file, { pin: true }))\r\n      {\r\n        console.log('hash ', result.path)\r\n        metaData +=  '\\n' + '\\t' + '\"' + 'name' + '\"'  + ':' + \" \" + '\"' +  'Hex Profile Pic'  +  '\"' + ', ';\r\n        metaData +=  '\\n' + '\\t' + '\"' + 'description' + '\"'  + ':' + \" \" + '\"' +  this.state.description + '\"' + ', ';\r\n        metaData +=  '\\n' + '\\t' + '\"' + 'symbol' + '\"'  + ':' + \" \" + '\"' + 'HXP' +  '\"' + ', ';\r\n        metaData +=  '\\n' + '\\t' + '\"' + 'image' + '\"'  + ':' + \" \" + '\"' + 'ipfs://' + result.path + '\"';// + ', ';\r\n        metaData += '\\n' + '}';\r\n        image_path = result.path\r\n    }\r\n    console.log(metaData)\r\n    console.log(\"Submitting file to IPFS...\")\r\n    const jsonDATA = JSON.parse(metaData);\r\n    for await (var meta of ipfs.add(JSON.stringify(jsonDATA), { pin: true }))\r\n    {\r\n      console.log(signersAddress)\r\n      const imageURI = 'https://ipfs.io/ipfs/' + image_path\r\n      const tokenURI = 'https://ipfs.io/ipfs/' + meta.path\r\n      console.log('URL: ', tokenURI)\r\n      console.log('image: ', imageURI)\r\n      const InterPlan721 = await factory.mintHexProfilePic(signersAddress, tokenURI);\r\n      console.log(\"Transaction Hash:\\t\", InterPlan721.hash)\r\n      this.setState({\r\n        transactionHash: InterPlan721.hash\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  captureFile = event => \r\n  {\r\n    console.log('capturing ', this.state.image)\r\n    event.preventDefault()\r\n    const temp = event.target.files[0]\r\n    const reader = new window.FileReader()\r\n    reader.readAsArrayBuffer(temp)\r\n\r\n    reader.onloadend = () => {\r\n      this.setState({ file: temp })\r\n      console.log('file', temp)\r\n    }\r\n  }\r\n\r\n\r\n  \r\n\r\n  constructor(props) \r\n  {\r\n    super(props)\r\n    this.state = \r\n    {\r\n      description: null,\r\n      file: null,\r\n      address: null,\r\n      transactionHash: null\r\n    }\r\n    this.uploadFile = this.uploadFile.bind(this)\r\n    this.captureFile = this.captureFile.bind(this)\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\r\n  \r\n      <h1>InterPlanetary Image</h1>\r\n\r\n      <h8></h8>\r\n      <Button\r\n      title=\"Home Page\"\r\n      onPress={() => this.props.navigation.navigate('Home')}\r\n      />\r\n\r\n\r\n\r\n      <form onSubmit={(event) => {\r\n          event.preventDefault()\r\n          const temp_description = this.description.value\r\n          this.setState({\r\n            description: temp_description,\r\n          })\r\n          this.uploadFile()\r\n        }}>\r\n          &nbsp;\r\n\r\n\r\n          <input \r\n            type='file' \r\n            accept=\".jpg, .png, .jpeg\" \r\n            onChange={this.captureFile}\r\n          />\r\n          <div className=\"form-group mr-sm-2\">\r\n          <h1> </h1>\r\n\r\n\r\n          <div className=\"form-group mr-sm-2\"></div>\r\n          <input\r\n            id= 'description'   \r\n            type=\"text\"\r\n            className=\"form-control-sm\"\r\n            placeholder=\"Description of NFT\"\r\n            required\r\n            ref={(input) => {this.description = input}}\r\n          />\r\n\r\n          <div className=\"form-group mr-sm-2\"></div>\r\n          <input\r\n          type='submit'\r\n          className='btn btn-block btn-primary'\r\n          value='MINT'\r\n          />\r\n          </div></form>\r\n\r\n          <div>Transaction Hash:{this.state.transactionHash}</div>\r\n          <div>Use this hash in the website below to find tokenID ann Contract Address</div>   \r\n          <a href=\"https://goerli.etherscan.io/\"> Goerli Ether Scan</a>\r\n      </View>\r\n    )\r\n  }\r\n}\r\nexport default ImageViewer;","export default function bytecode()\r\n{\r\n    return [\r\n      {\r\n        \"inputs\": [],\r\n        \"stateMutability\": \"nonpayable\",\r\n        \"type\": \"constructor\"\r\n      },\r\n      {\r\n        \"anonymous\": false,\r\n        \"inputs\": [\r\n          {\r\n            \"indexed\": true,\r\n            \"internalType\": \"address\",\r\n            \"name\": \"owner\",\r\n            \"type\": \"address\"\r\n          },\r\n          {\r\n            \"indexed\": true,\r\n            \"internalType\": \"address\",\r\n            \"name\": \"approved\",\r\n            \"type\": \"address\"\r\n          },\r\n          {\r\n            \"indexed\": true,\r\n            \"internalType\": \"uint256\",\r\n            \"name\": \"tokenId\",\r\n            \"type\": \"uint256\"\r\n          }\r\n        ],\r\n        \"name\": \"Approval\",\r\n        \"type\": \"event\"\r\n      },\r\n      {\r\n        \"anonymous\": false,\r\n        \"inputs\": [\r\n          {\r\n            \"indexed\": true,\r\n            \"internalType\": \"address\",\r\n            \"name\": \"owner\",\r\n            \"type\": \"address\"\r\n          },\r\n          {\r\n            \"indexed\": true,\r\n            \"internalType\": \"address\",\r\n            \"name\": \"operator\",\r\n            \"type\": \"address\"\r\n          },\r\n          {\r\n            \"indexed\": false,\r\n            \"internalType\": \"bool\",\r\n            \"name\": \"approved\",\r\n            \"type\": \"bool\"\r\n          }\r\n        ],\r\n        \"name\": \"ApprovalForAll\",\r\n        \"type\": \"event\"\r\n      },\r\n      {\r\n        \"anonymous\": false,\r\n        \"inputs\": [\r\n          {\r\n            \"indexed\": true,\r\n            \"internalType\": \"address\",\r\n            \"name\": \"from\",\r\n            \"type\": \"address\"\r\n          },\r\n          {\r\n            \"indexed\": true,\r\n            \"internalType\": \"address\",\r\n            \"name\": \"to\",\r\n            \"type\": \"address\"\r\n          },\r\n          {\r\n            \"indexed\": true,\r\n            \"internalType\": \"uint256\",\r\n            \"name\": \"tokenId\",\r\n            \"type\": \"uint256\"\r\n          }\r\n        ],\r\n        \"name\": \"Transfer\",\r\n        \"type\": \"event\"\r\n      },\r\n      {\r\n        \"inputs\": [\r\n          {\r\n            \"internalType\": \"address\",\r\n            \"name\": \"to\",\r\n            \"type\": \"address\"\r\n          },\r\n          {\r\n            \"internalType\": \"uint256\",\r\n            \"name\": \"tokenId\",\r\n            \"type\": \"uint256\"\r\n          }\r\n        ],\r\n        \"name\": \"approve\",\r\n        \"outputs\": [],\r\n        \"stateMutability\": \"nonpayable\",\r\n        \"type\": \"function\"\r\n      },\r\n      {\r\n        \"inputs\": [\r\n          {\r\n            \"internalType\": \"address\",\r\n            \"name\": \"owner\",\r\n            \"type\": \"address\"\r\n          }\r\n        ],\r\n        \"name\": \"balanceOf\",\r\n        \"outputs\": [\r\n          {\r\n            \"internalType\": \"uint256\",\r\n            \"name\": \"\",\r\n            \"type\": \"uint256\"\r\n          }\r\n        ],\r\n        \"stateMutability\": \"view\",\r\n        \"type\": \"function\"\r\n      },\r\n      {\r\n        \"inputs\": [\r\n          {\r\n            \"internalType\": \"uint256\",\r\n            \"name\": \"tokenId\",\r\n            \"type\": \"uint256\"\r\n          }\r\n        ],\r\n        \"name\": \"getApproved\",\r\n        \"outputs\": [\r\n          {\r\n            \"internalType\": \"address\",\r\n            \"name\": \"\",\r\n            \"type\": \"address\"\r\n          }\r\n        ],\r\n        \"stateMutability\": \"view\",\r\n        \"type\": \"function\"\r\n      },\r\n      {\r\n        \"inputs\": [\r\n          {\r\n            \"internalType\": \"address\",\r\n            \"name\": \"owner\",\r\n            \"type\": \"address\"\r\n          },\r\n          {\r\n            \"internalType\": \"address\",\r\n            \"name\": \"operator\",\r\n            \"type\": \"address\"\r\n          }\r\n        ],\r\n        \"name\": \"isApprovedForAll\",\r\n        \"outputs\": [\r\n          {\r\n            \"internalType\": \"bool\",\r\n            \"name\": \"\",\r\n            \"type\": \"bool\"\r\n          }\r\n        ],\r\n        \"stateMutability\": \"view\",\r\n        \"type\": \"function\"\r\n      },\r\n      {\r\n        \"inputs\": [\r\n          {\r\n            \"internalType\": \"address\",\r\n            \"name\": \"owner\",\r\n            \"type\": \"address\"\r\n          },\r\n          {\r\n            \"internalType\": \"string\",\r\n            \"name\": \"tokenURI\",\r\n            \"type\": \"string\"\r\n          }\r\n        ],\r\n        \"name\": \"mintHexProfilePic\",\r\n        \"outputs\": [],\r\n        \"stateMutability\": \"payable\",\r\n        \"type\": \"function\"\r\n      },\r\n      {\r\n        \"inputs\": [],\r\n        \"name\": \"name\",\r\n        \"outputs\": [\r\n          {\r\n            \"internalType\": \"string\",\r\n            \"name\": \"\",\r\n            \"type\": \"string\"\r\n          }\r\n        ],\r\n        \"stateMutability\": \"view\",\r\n        \"type\": \"function\"\r\n      },\r\n      {\r\n        \"inputs\": [\r\n          {\r\n            \"internalType\": \"uint256\",\r\n            \"name\": \"tokenId\",\r\n            \"type\": \"uint256\"\r\n          }\r\n        ],\r\n        \"name\": \"ownerOf\",\r\n        \"outputs\": [\r\n          {\r\n            \"internalType\": \"address\",\r\n            \"name\": \"\",\r\n            \"type\": \"address\"\r\n          }\r\n        ],\r\n        \"stateMutability\": \"view\",\r\n        \"type\": \"function\"\r\n      },\r\n      {\r\n        \"inputs\": [\r\n          {\r\n            \"internalType\": \"address\",\r\n            \"name\": \"from\",\r\n            \"type\": \"address\"\r\n          },\r\n          {\r\n            \"internalType\": \"address\",\r\n            \"name\": \"to\",\r\n            \"type\": \"address\"\r\n          },\r\n          {\r\n            \"internalType\": \"uint256\",\r\n            \"name\": \"tokenId\",\r\n            \"type\": \"uint256\"\r\n          }\r\n        ],\r\n        \"name\": \"safeTransferFrom\",\r\n        \"outputs\": [],\r\n        \"stateMutability\": \"nonpayable\",\r\n        \"type\": \"function\"\r\n      },\r\n      {\r\n        \"inputs\": [\r\n          {\r\n            \"internalType\": \"address\",\r\n            \"name\": \"from\",\r\n            \"type\": \"address\"\r\n          },\r\n          {\r\n            \"internalType\": \"address\",\r\n            \"name\": \"to\",\r\n            \"type\": \"address\"\r\n          },\r\n          {\r\n            \"internalType\": \"uint256\",\r\n            \"name\": \"tokenId\",\r\n            \"type\": \"uint256\"\r\n          },\r\n          {\r\n            \"internalType\": \"bytes\",\r\n            \"name\": \"_data\",\r\n            \"type\": \"bytes\"\r\n          }\r\n        ],\r\n        \"name\": \"safeTransferFrom\",\r\n        \"outputs\": [],\r\n        \"stateMutability\": \"nonpayable\",\r\n        \"type\": \"function\"\r\n      },\r\n      {\r\n        \"inputs\": [\r\n          {\r\n            \"internalType\": \"address\",\r\n            \"name\": \"operator\",\r\n            \"type\": \"address\"\r\n          },\r\n          {\r\n            \"internalType\": \"bool\",\r\n            \"name\": \"approved\",\r\n            \"type\": \"bool\"\r\n          }\r\n        ],\r\n        \"name\": \"setApprovalForAll\",\r\n        \"outputs\": [],\r\n        \"stateMutability\": \"nonpayable\",\r\n        \"type\": \"function\"\r\n      },\r\n      {\r\n        \"inputs\": [\r\n          {\r\n            \"internalType\": \"bytes4\",\r\n            \"name\": \"interfaceId\",\r\n            \"type\": \"bytes4\"\r\n          }\r\n        ],\r\n        \"name\": \"supportsInterface\",\r\n        \"outputs\": [\r\n          {\r\n            \"internalType\": \"bool\",\r\n            \"name\": \"\",\r\n            \"type\": \"bool\"\r\n          }\r\n        ],\r\n        \"stateMutability\": \"view\",\r\n        \"type\": \"function\"\r\n      },\r\n      {\r\n        \"inputs\": [],\r\n        \"name\": \"symbol\",\r\n        \"outputs\": [\r\n          {\r\n            \"internalType\": \"string\",\r\n            \"name\": \"\",\r\n            \"type\": \"string\"\r\n          }\r\n        ],\r\n        \"stateMutability\": \"view\",\r\n        \"type\": \"function\"\r\n      },\r\n      {\r\n        \"inputs\": [\r\n          {\r\n            \"internalType\": \"uint256\",\r\n            \"name\": \"tokenId\",\r\n            \"type\": \"uint256\"\r\n          }\r\n        ],\r\n        \"name\": \"tokenURI\",\r\n        \"outputs\": [\r\n          {\r\n            \"internalType\": \"string\",\r\n            \"name\": \"\",\r\n            \"type\": \"string\"\r\n          }\r\n        ],\r\n        \"stateMutability\": \"view\",\r\n        \"type\": \"function\"\r\n      },\r\n      {\r\n        \"inputs\": [\r\n          {\r\n            \"internalType\": \"address\",\r\n            \"name\": \"from\",\r\n            \"type\": \"address\"\r\n          },\r\n          {\r\n            \"internalType\": \"address\",\r\n            \"name\": \"to\",\r\n            \"type\": \"address\"\r\n          },\r\n          {\r\n            \"internalType\": \"uint256\",\r\n            \"name\": \"tokenId\",\r\n            \"type\": \"uint256\"\r\n          }\r\n        ],\r\n        \"name\": \"transferFrom\",\r\n        \"outputs\": [],\r\n        \"stateMutability\": \"nonpayable\",\r\n        \"type\": \"function\"\r\n      }\r\n    ]\r\n}","export default function bytecode()\r\n{\r\n    return \"0x60806040527372ef01d29b300460e44537e24b3ec535889e08d6600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506107d03462000069919062000209565b6008553480156200007957600080fd5b506040518060400160405280600f81526020017f4865782050726f66696c652050696300000000000000000000000000000000008152506040518060400160405280600381526020017f48585000000000000000000000000000000000000000000000000000000000008152508160009080519060200190620000fe92919062000120565b5080600190805190602001906200011792919062000120565b505050620002a6565b8280546200012e9062000270565b90600052602060002090601f0160209004810192826200015257600085556200019e565b82601f106200016d57805160ff19168380011785556200019e565b828001600101855582156200019e579182015b828111156200019d57825182559160200191906001019062000180565b5b509050620001ad9190620001b1565b5090565b5b80821115620001cc576000816000905550600101620001b2565b5090565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006200021682620001d0565b91506200022383620001d0565b925082620002365762000235620001da565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200028957607f821691505b60208210811415620002a0576200029f62000241565b5b50919050565b612dac80620002b66000396000f3fe6080604052600436106100dd5760003560e01c806370a082311161007f578063a22cb46511610059578063a22cb465146102c3578063b88d4fde146102ec578063c87b56dd14610315578063e985e9c514610352576100dd565b806370a082311461023f57806395d89b411461027c5780639a09971b146102a7576100dd565b8063095ea7b3116100bb578063095ea7b31461018757806323b872dd146101b057806342842e0e146101d95780636352211e14610202576100dd565b806301ffc9a7146100e257806306fdde031461011f578063081812fc1461014a575b600080fd5b3480156100ee57600080fd5b5061010960048036038101906101049190611a5c565b61038f565b6040516101169190611aa4565b60405180910390f35b34801561012b57600080fd5b50610134610471565b6040516101419190611b58565b60405180910390f35b34801561015657600080fd5b50610171600480360381019061016c9190611bb0565b610503565b60405161017e9190611c1e565b60405180910390f35b34801561019357600080fd5b506101ae60048036038101906101a99190611c65565b610588565b005b3480156101bc57600080fd5b506101d760048036038101906101d29190611ca5565b6106a0565b005b3480156101e557600080fd5b5061020060048036038101906101fb9190611ca5565b610700565b005b34801561020e57600080fd5b5061022960048036038101906102249190611bb0565b610720565b6040516102369190611c1e565b60405180910390f35b34801561024b57600080fd5b5061026660048036038101906102619190611cf8565b6107d2565b6040516102739190611d34565b60405180910390f35b34801561028857600080fd5b5061029161088a565b60405161029e9190611b58565b60405180910390f35b6102c160048036038101906102bc9190611e84565b61091c565b005b3480156102cf57600080fd5b506102ea60048036038101906102e59190611f0c565b610a21565b005b3480156102f857600080fd5b50610313600480360381019061030e9190611fed565b610a37565b005b34801561032157600080fd5b5061033c60048036038101906103379190611bb0565b610a99565b6040516103499190611b58565b60405180910390f35b34801561035e57600080fd5b5061037960048036038101906103749190612070565b610beb565b6040516103869190611aa4565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061045a57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061046a575061046982610c7f565b5b9050919050565b606060008054610480906120df565b80601f01602080910402602001604051908101604052809291908181526020018280546104ac906120df565b80156104f95780601f106104ce576101008083540402835291602001916104f9565b820191906000526020600020905b8154815290600101906020018083116104dc57829003601f168201915b5050505050905090565b600061050e82610ce9565b61054d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054490612183565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061059382610720565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610604576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fb90612215565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610623610d55565b73ffffffffffffffffffffffffffffffffffffffff16148061065257506106518161064c610d55565b610beb565b5b610691576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610688906122a7565b60405180910390fd5b61069b8383610d5d565b505050565b6106b16106ab610d55565b82610e16565b6106f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e790612339565b60405180910390fd5b6106fb838383610ef4565b505050565b61071b83838360405180602001604052806000815250610a37565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156107c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c0906123cb565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610843576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083a9061245d565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060018054610899906120df565b80601f01602080910402602001604051908101604052809291908181526020018280546108c5906120df565b80156109125780601f106108e757610100808354040283529160200191610912565b820191906000526020600020905b8154815290600101906020018083116108f557829003601f168201915b5050505050905090565b6109266009611150565b60006109326009611166565b905061093e8382611174565b6109488183611342565b600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600854604051610993906124ae565b60006040518083038185875af1925050503d80600081146109d0576040519150601f19603f3d011682016040523d82523d6000602084013e6109d5565b606091505b509150915081610a1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a119061250f565b60405180910390fd5b5050505050565b610a33610a2c610d55565b83836113b6565b5050565b610a48610a42610d55565b83610e16565b610a87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7e90612339565b60405180910390fd5b610a9384848484611523565b50505050565b6060610aa482610ce9565b610ae3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ada906125a1565b60405180910390fd5b6000600660008481526020019081526020016000208054610b03906120df565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2f906120df565b8015610b7c5780601f10610b5157610100808354040283529160200191610b7c565b820191906000526020600020905b815481529060010190602001808311610b5f57829003601f168201915b505050505090506000610b8d61157f565b9050600081511415610ba3578192505050610be6565b600082511115610bd8578082604051602001610bc09291906125fd565b60405160208183030381529060405292505050610be6565b610be184611596565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610dd083610720565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610e2182610ce9565b610e60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5790612693565b60405180910390fd5b6000610e6b83610720565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610eda57508373ffffffffffffffffffffffffffffffffffffffff16610ec284610503565b73ffffffffffffffffffffffffffffffffffffffff16145b80610eeb5750610eea8185610beb565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610f1482610720565b73ffffffffffffffffffffffffffffffffffffffff1614610f6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6190612725565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610fda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd1906127b7565b60405180910390fd5b610fe583838361163d565b610ff0600082610d5d565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546110409190612806565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611097919061283a565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156111e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111db906128dc565b60405180910390fd5b6111ed81610ce9565b1561122d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122490612948565b60405180910390fd5b6112396000838361163d565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611289919061283a565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b61134b82610ce9565b61138a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611381906129da565b60405180910390fd5b806006600084815260200190815260200160002090805190602001906113b192919061194d565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611425576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141c90612a46565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516115169190611aa4565b60405180910390a3505050565b61152e848484610ef4565b61153a84848484611642565b611579576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157090612ad8565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606115a182610ce9565b6115e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d790612b6a565b60405180910390fd5b60006115ea61157f565b9050600081511161160a5760405180602001604052806000815250611635565b80611614846117d9565b6040516020016116259291906125fd565b6040516020818303038152906040525b915050919050565b505050565b60006116638473ffffffffffffffffffffffffffffffffffffffff1661193a565b156117cc578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261168c610d55565b8786866040518563ffffffff1660e01b81526004016116ae9493929190612bdf565b602060405180830381600087803b1580156116c857600080fd5b505af19250505080156116f957506040513d601f19601f820116820180604052508101906116f69190612c40565b60015b61177c573d8060008114611729576040519150601f19603f3d011682016040523d82523d6000602084013e61172e565b606091505b50600081511415611774576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176b90612ad8565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506117d1565b600190505b949350505050565b60606000821415611821576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611935565b600082905060005b6000821461185357808061183c90612c6d565b915050600a8261184c9190612ce5565b9150611829565b60008167ffffffffffffffff81111561186f5761186e611d59565b5b6040519080825280601f01601f1916602001820160405280156118a15781602001600182028036833780820191505090505b5090505b6000851461192e576001826118ba9190612806565b9150600a856118c99190612d16565b60306118d5919061283a565b60f81b8183815181106118eb576118ea612d47565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856119279190612ce5565b94506118a5565b8093505050505b919050565b600080823b905060008111915050919050565b828054611959906120df565b90600052602060002090601f01602090048101928261197b57600085556119c2565b82601f1061199457805160ff19168380011785556119c2565b828001600101855582156119c2579182015b828111156119c15782518255916020019190600101906119a6565b5b5090506119cf91906119d3565b5090565b5b808211156119ec5760008160009055506001016119d4565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611a3981611a04565b8114611a4457600080fd5b50565b600081359050611a5681611a30565b92915050565b600060208284031215611a7257611a716119fa565b5b6000611a8084828501611a47565b91505092915050565b60008115159050919050565b611a9e81611a89565b82525050565b6000602082019050611ab96000830184611a95565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611af9578082015181840152602081019050611ade565b83811115611b08576000848401525b50505050565b6000601f19601f8301169050919050565b6000611b2a82611abf565b611b348185611aca565b9350611b44818560208601611adb565b611b4d81611b0e565b840191505092915050565b60006020820190508181036000830152611b728184611b1f565b905092915050565b6000819050919050565b611b8d81611b7a565b8114611b9857600080fd5b50565b600081359050611baa81611b84565b92915050565b600060208284031215611bc657611bc56119fa565b5b6000611bd484828501611b9b565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c0882611bdd565b9050919050565b611c1881611bfd565b82525050565b6000602082019050611c336000830184611c0f565b92915050565b611c4281611bfd565b8114611c4d57600080fd5b50565b600081359050611c5f81611c39565b92915050565b60008060408385031215611c7c57611c7b6119fa565b5b6000611c8a85828601611c50565b9250506020611c9b85828601611b9b565b9150509250929050565b600080600060608486031215611cbe57611cbd6119fa565b5b6000611ccc86828701611c50565b9350506020611cdd86828701611c50565b9250506040611cee86828701611b9b565b9150509250925092565b600060208284031215611d0e57611d0d6119fa565b5b6000611d1c84828501611c50565b91505092915050565b611d2e81611b7a565b82525050565b6000602082019050611d496000830184611d25565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611d9182611b0e565b810181811067ffffffffffffffff82111715611db057611daf611d59565b5b80604052505050565b6000611dc36119f0565b9050611dcf8282611d88565b919050565b600067ffffffffffffffff821115611def57611dee611d59565b5b611df882611b0e565b9050602081019050919050565b82818337600083830152505050565b6000611e27611e2284611dd4565b611db9565b905082815260208101848484011115611e4357611e42611d54565b5b611e4e848285611e05565b509392505050565b600082601f830112611e6b57611e6a611d4f565b5b8135611e7b848260208601611e14565b91505092915050565b60008060408385031215611e9b57611e9a6119fa565b5b6000611ea985828601611c50565b925050602083013567ffffffffffffffff811115611eca57611ec96119ff565b5b611ed685828601611e56565b9150509250929050565b611ee981611a89565b8114611ef457600080fd5b50565b600081359050611f0681611ee0565b92915050565b60008060408385031215611f2357611f226119fa565b5b6000611f3185828601611c50565b9250506020611f4285828601611ef7565b9150509250929050565b600067ffffffffffffffff821115611f6757611f66611d59565b5b611f7082611b0e565b9050602081019050919050565b6000611f90611f8b84611f4c565b611db9565b905082815260208101848484011115611fac57611fab611d54565b5b611fb7848285611e05565b509392505050565b600082601f830112611fd457611fd3611d4f565b5b8135611fe4848260208601611f7d565b91505092915050565b60008060008060808587031215612007576120066119fa565b5b600061201587828801611c50565b945050602061202687828801611c50565b935050604061203787828801611b9b565b925050606085013567ffffffffffffffff811115612058576120576119ff565b5b61206487828801611fbf565b91505092959194509250565b60008060408385031215612087576120866119fa565b5b600061209585828601611c50565b92505060206120a685828601611c50565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806120f757607f821691505b6020821081141561210b5761210a6120b0565b5b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b600061216d602c83611aca565b915061217882612111565b604082019050919050565b6000602082019050818103600083015261219c81612160565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006121ff602183611aca565b915061220a826121a3565b604082019050919050565b6000602082019050818103600083015261222e816121f2565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b6000612291603883611aca565b915061229c82612235565b604082019050919050565b600060208201905081810360008301526122c081612284565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b6000612323603183611aca565b915061232e826122c7565b604082019050919050565b6000602082019050818103600083015261235281612316565b9050919050565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b60006123b5602983611aca565b91506123c082612359565b604082019050919050565b600060208201905081810360008301526123e4816123a8565b9050919050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000612447602a83611aca565b9150612452826123eb565b604082019050919050565b600060208201905081810360008301526124768161243a565b9050919050565b600081905092915050565b50565b600061249860008361247d565b91506124a382612488565b600082019050919050565b60006124b98261248b565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b60006124f9601483611aca565b9150612504826124c3565b602082019050919050565b60006020820190508181036000830152612528816124ec565b9050919050565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b600061258b603183611aca565b91506125968261252f565b604082019050919050565b600060208201905081810360008301526125ba8161257e565b9050919050565b600081905092915050565b60006125d782611abf565b6125e181856125c1565b93506125f1818560208601611adb565b80840191505092915050565b600061260982856125cc565b915061261582846125cc565b91508190509392505050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b600061267d602c83611aca565b915061268882612621565b604082019050919050565b600060208201905081810360008301526126ac81612670565b9050919050565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b600061270f602983611aca565b915061271a826126b3565b604082019050919050565b6000602082019050818103600083015261273e81612702565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006127a1602483611aca565b91506127ac82612745565b604082019050919050565b600060208201905081810360008301526127d081612794565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061281182611b7a565b915061281c83611b7a565b92508282101561282f5761282e6127d7565b5b828203905092915050565b600061284582611b7a565b915061285083611b7a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612885576128846127d7565b5b828201905092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006128c6602083611aca565b91506128d182612890565b602082019050919050565b600060208201905081810360008301526128f5816128b9565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612932601c83611aca565b915061293d826128fc565b602082019050919050565b6000602082019050818103600083015261296181612925565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b60006129c4602e83611aca565b91506129cf82612968565b604082019050919050565b600060208201905081810360008301526129f3816129b7565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612a30601983611aca565b9150612a3b826129fa565b602082019050919050565b60006020820190508181036000830152612a5f81612a23565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612ac2603283611aca565b9150612acd82612a66565b604082019050919050565b60006020820190508181036000830152612af181612ab5565b9050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b6000612b54602f83611aca565b9150612b5f82612af8565b604082019050919050565b60006020820190508181036000830152612b8381612b47565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000612bb182612b8a565b612bbb8185612b95565b9350612bcb818560208601611adb565b612bd481611b0e565b840191505092915050565b6000608082019050612bf46000830187611c0f565b612c016020830186611c0f565b612c0e6040830185611d25565b8181036060830152612c208184612ba6565b905095945050505050565b600081519050612c3a81611a30565b92915050565b600060208284031215612c5657612c556119fa565b5b6000612c6484828501612c2b565b91505092915050565b6000612c7882611b7a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612cab57612caa6127d7565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612cf082611b7a565b9150612cfb83611b7a565b925082612d0b57612d0a612cb6565b5b828204905092915050565b6000612d2182611b7a565b9150612d2c83611b7a565b925082612d3c57612d3b612cb6565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea264697066735822122031b08c3b4767db650220304ff15e41db6bd6489511a70592faf480f1454ac5d864736f6c63430008090033\"\r\n}","import React, { Component } from 'react';\r\nimport {Button, View} from 'react-native'; \r\n\r\n\r\n\r\nclass HomePage extends Component {\r\n\r\n  \r\n\r\n  render() {\r\n    return (\r\n      \r\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\r\n  \r\n      <h1>InterPlanetary 721</h1>\r\n      \r\n      <div class=\"marginButton\">\r\n      <Button\r\n      title=\"Mint an Image\"\r\n      onPress={() => this.props.navigation.navigate('Image')}\r\n      />\r\n      </div>\r\n      <div class=\"marginTitle\"> This website uses the following (works only on in the Goerli testnetwork for the moment):</div>\r\n        <ul>\r\n          <li>Hardhat instead of Truffle</li>\r\n          <li>Ether.js instead of Web3.js</li>\r\n          <li>IPFS (Inter Planetary File System)</li>\r\n          <li>ERC721 contracts</li>\r\n          <li>OpenZeppelin</li>\r\n          <li>OpenSea API</li>\r\n          <li>MetaMask</li>\r\n        </ul>\r\n        <div class=\"marginTitle\"> Previous verisons of this project were not OpenSea or MetaMask compatible:</div>\r\n      <div>Imporant Links:</div>\r\n\r\n        <ul>\r\n          <li><a href=\"https://www.linkedin.com/in/jared-samonte-9b9192157/\">LinkedIn Account</a></li>\r\n          <li><a href=\"https://github.com/jared-v-samonte/InterPlan721\">GitHub Repository</a></li>\r\n          <li><a href=\"https://jared-v-samonte.github.io/IPFS-NFTs-project/\">Previous Version</a></li>\r\n        </ul>\r\n      </View>\r\n      \r\n    )\r\n  }\r\n}\r\nexport default HomePage;","import React, {Component} from 'react';\r\nimport { createAppContainer } from \"react-navigation\";\r\nimport {createStackNavigator} from \"react-navigation-stack\";\r\nimport './App.css';\r\nimport ImageViewer from './ImageViewer.js'\r\n//import VideoViewer from './VideoViewer.js'\r\n//import AudioListener from './AudioListener.js'\r\nimport HomePage from './HomePage.js'\r\n\r\n\r\n\r\nclass App extends Component {\r\n  render() \r\n  {\r\n    return(\r\n      <AppContainer />\r\n    )\r\n  }\r\n}\r\n\r\n\r\nconst AppNavigator = createStackNavigator({\r\n  Home: {\r\n    screen: HomePage\r\n  },\r\n  Image: {\r\n    screen: ImageViewer\r\n  }\r\n});\r\n\r\n\r\nconst AppContainer = createAppContainer(AppNavigator);\r\n\r\nexport default App\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport App from './components/App.js';\r\nimport * as serviceWorker from './serviceWorker.js';\r\nimport BrowserRouter from 'react-router-dom/BrowserRouter'\r\n\r\n\r\n\r\n\r\nconst root = document.getElementById('root')\r\n\r\nif (root != null) {\r\n  ReactDOM.render((\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n      <App />\r\n    </BrowserRouter>\r\n ), root)\r\n}\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n\r\n"],"sourceRoot":""}