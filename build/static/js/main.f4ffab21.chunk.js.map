{"version":3,"sources":["components/ImageViewer.js","components/Abi.js","components/Bytecode.js","components/HomePage.js","components/App.js","serviceWorker.js","index.js"],"names":["ipfsClient","require","config","ipfs","host","port","protocol","apiPath","ImageViewer","props","captureFile","event","console","log","state","image","preventDefault","temp","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","setState","file","name","description","symbol","address","uploadFile","bind","a","ethereum","request","method","provider","providers","Web3Provider","getSigner","signer","getAddress","signersAddress","factory","ContractFactory","metaData","add","this","pin","result","path","jsonDATA","JSON","parse","stringify","meta","imageURI","tokenURI","deploy","InterPlan721","View","style","flex","alignItems","justifyContent","Button","title","onPress","navigation","navigate","onSubmit","temp_name","value","temp_description","temp_symbol","type","accept","onChange","className","id","placeholder","required","ref","input","Component","HomePage","class","href","App","AppContainer","AppNavigator","createStackNavigator","Home","screen","Image","createAppContainer","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","root","document","getElementById","ReactDOM","render","basename","process","URL","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f4ffab21.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {Button, View} from 'react-native';\r\nimport {ContractFactory, providers} from 'ethers';\r\nimport bytecode from './Bytecode.js'; \r\nimport abi from './Abi.js'; \r\nconst ipfsClient = require('ipfs-http-client')\r\nrequire('dotenv').config();\r\nconst ipfs = ipfsClient({host: 'ipfs.infura.io', port: 5001, protocol: 'https', apiPath: '/api/v0'}) \r\n\r\n\r\n\r\nclass ImageViewer extends Component {\r\n\r\n\r\n  async uploadFile () {\r\n\r\n    await window.ethereum.request({method: 'eth_requestAccounts'});\r\n    const provider = new providers.Web3Provider(window.ethereum);\r\n\r\n    const signer = await provider.getSigner()\r\n    const signersAddress = await signer.getAddress()\r\n    console.log(\"Account:\", signersAddress);\r\n\r\n      const factory = new ContractFactory(abi(), bytecode(), signer)\r\n      \r\n      console.log(\"Submitting file to IPFS...\")\r\n      var metaData = '{ ';\r\n      for await (var result of ipfs.add(this.state.file, { pin: true }))\r\n      {\r\n        console.log('hash ', result.path)\r\n        metaData +=  '\\n' + '\\t' + '\"' + 'name' + '\"'  + ':' + \" \" + '\"' +  this.state.name  +  '\"' + ', ';\r\n        metaData +=  '\\n' + '\\t' + '\"' + 'description' + '\"'  + ':' + \" \" + '\"' +  this.state.description + '\"' + ', ';\r\n        metaData +=  '\\n' + '\\t' + '\"' + 'symbol' + '\"'  + ':' + \" \" + '\"' + this.state.symbol +  '\"' + ', ';\r\n        metaData +=  '\\n' + '\\t' + '\"' + 'image' + '\"'  + ':' + \" \" + '\"' + 'ipfs://' + result.path + '\"';// + ', ';\r\n        metaData += '\\n' + '}';\r\n    }\r\n    console.log(metaData)\r\n    console.log(\"Submitting file to IPFS...\")\r\n    const jsonDATA = JSON.parse(metaData);\r\n    for await (var meta of ipfs.add(JSON.stringify(jsonDATA), { pin: true }))\r\n        {\r\n          console.log(signersAddress)\r\n          console.log(this.state.name)\r\n          console.log(this.state.symbol)\r\n          const imageURI = 'https://ipfs.io/ipfs/' + this.state.image\r\n          const tokenURI = 'https://ipfs.io/ipfs/' + meta.path\r\n          console.log('URL: ', tokenURI)\r\n          console.log('image: ', imageURI)\r\n          const InterPlan721 = await factory.deploy(signersAddress, this.state.name, this.state.symbol, tokenURI);\r\n          console.log(\"Contract deployed at:\", InterPlan721.signersAddress);\r\n          this.setState({\r\n            address: InterPlan721.address\r\n          })\r\n        }\r\n  }\r\n\r\n\r\n  captureFile = event => \r\n  {\r\n    console.log('capturing ', this.state.image)\r\n    event.preventDefault()\r\n    const temp = event.target.files[0]\r\n    const reader = new window.FileReader()\r\n    reader.readAsArrayBuffer(temp)\r\n\r\n    reader.onloadend = () => {\r\n      this.setState({ file: temp })\r\n      console.log('file', temp)\r\n    }\r\n  }\r\n\r\n\r\n  \r\n\r\n  constructor(props) \r\n  {\r\n    super(props)\r\n    this.state = \r\n    {\r\n      name: null,\r\n      description: null,\r\n      symbol: null,\r\n      file: null,\r\n      address: null,\r\n    }\r\n    this.uploadFile = this.uploadFile.bind(this)\r\n    this.captureFile = this.captureFile.bind(this)\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\r\n  \r\n      <h1>InterPlanetary Image</h1>\r\n\r\n      <Button\r\n      title=\"Home Page\"\r\n      onPress={() => this.props.navigation.navigate('Home')}\r\n      />\r\n\r\n\r\n\r\n      <form onSubmit={(event) => {\r\n          event.preventDefault()\r\n          const temp_name = this.name.value\r\n          const temp_description = this.description.value\r\n          const temp_symbol = this.symbol.value\r\n          this.setState({\r\n            name: temp_name,\r\n            description: temp_description,\r\n            symbol: temp_symbol,\r\n          })\r\n          this.uploadFile()\r\n        }}>\r\n          &nbsp;\r\n\r\n\r\n          <input \r\n            type='file' \r\n            accept=\".jpg, .png, .jpeg\" \r\n            onChange={this.captureFile}\r\n          />\r\n          <div className=\"form-group mr-sm-2\">\r\n          <h1> </h1>\r\n\r\n          <input \r\n            id= 'name'  \r\n            type=\"text\"\r\n            className=\"form-control-sm\"\r\n            placeholder=\"Name of NFT\"\r\n            required\r\n            ref={(input) => {this.name = input}}\r\n          />\r\n\r\n\r\n          <div className=\"form-group mr-sm-2\"></div>\r\n          <input\r\n            id= 'description'   \r\n            type=\"text\"\r\n            className=\"form-control-sm\"\r\n            placeholder=\"Description of NFT\"\r\n            required\r\n            ref={(input) => {this.description = input}}\r\n          />\r\n\r\n          <input \r\n            id= 'symbol'    \r\n            type=\"text\"\r\n            className=\"form-control-sm\"\r\n            placeholder=\"Symbol of NFT\"\r\n            required\r\n            ref={(input) => {this.symbol = input}}\r\n          />\r\n\r\n          <div className=\"form-group mr-sm-2\"></div>\r\n          <input\r\n          type='submit'\r\n          className='btn btn-block btn-primary'\r\n          value='MINT'\r\n          />\r\n          </div></form>\r\n\r\n          <div>Contract Address: {this.state.address}</div>\r\n          <div>Token ID: 1</div>\r\n      \r\n\r\n      </View>\r\n    )\r\n  }\r\n}\r\nexport default ImageViewer;","export default function bytecode()\r\n{\r\n    return [\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"owner\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"internalType\": \"string\",\r\n          \"name\": \"name\",\r\n          \"type\": \"string\"\r\n        },\r\n        {\r\n          \"internalType\": \"string\",\r\n          \"name\": \"symbol\",\r\n          \"type\": \"string\"\r\n        },\r\n        {\r\n          \"internalType\": \"string\",\r\n          \"name\": \"tokURI\",\r\n          \"type\": \"string\"\r\n        }\r\n      ],\r\n      \"stateMutability\": \"nonpayable\",\r\n      \"type\": \"constructor\"\r\n    },\r\n    {\r\n      \"anonymous\": false,\r\n      \"inputs\": [\r\n        {\r\n          \"indexed\": true,\r\n          \"internalType\": \"address\",\r\n          \"name\": \"owner\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"indexed\": true,\r\n          \"internalType\": \"address\",\r\n          \"name\": \"approved\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"indexed\": true,\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"tokenId\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"name\": \"Approval\",\r\n      \"type\": \"event\"\r\n    },\r\n    {\r\n      \"anonymous\": false,\r\n      \"inputs\": [\r\n        {\r\n          \"indexed\": true,\r\n          \"internalType\": \"address\",\r\n          \"name\": \"owner\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"indexed\": true,\r\n          \"internalType\": \"address\",\r\n          \"name\": \"operator\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"indexed\": false,\r\n          \"internalType\": \"bool\",\r\n          \"name\": \"approved\",\r\n          \"type\": \"bool\"\r\n        }\r\n      ],\r\n      \"name\": \"ApprovalForAll\",\r\n      \"type\": \"event\"\r\n    },\r\n    {\r\n      \"anonymous\": false,\r\n      \"inputs\": [\r\n        {\r\n          \"indexed\": true,\r\n          \"internalType\": \"address\",\r\n          \"name\": \"from\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"indexed\": true,\r\n          \"internalType\": \"address\",\r\n          \"name\": \"to\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"indexed\": true,\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"tokenId\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"name\": \"Transfer\",\r\n      \"type\": \"event\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"to\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"tokenId\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"name\": \"approve\",\r\n      \"outputs\": [],\r\n      \"stateMutability\": \"nonpayable\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"owner\",\r\n          \"type\": \"address\"\r\n        }\r\n      ],\r\n      \"name\": \"balanceOf\",\r\n      \"outputs\": [\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"stateMutability\": \"view\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"tokenId\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"name\": \"getApproved\",\r\n      \"outputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"\",\r\n          \"type\": \"address\"\r\n        }\r\n      ],\r\n      \"stateMutability\": \"view\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"owner\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"operator\",\r\n          \"type\": \"address\"\r\n        }\r\n      ],\r\n      \"name\": \"isApprovedForAll\",\r\n      \"outputs\": [\r\n        {\r\n          \"internalType\": \"bool\",\r\n          \"name\": \"\",\r\n          \"type\": \"bool\"\r\n        }\r\n      ],\r\n      \"stateMutability\": \"view\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [],\r\n      \"name\": \"name\",\r\n      \"outputs\": [\r\n        {\r\n          \"internalType\": \"string\",\r\n          \"name\": \"\",\r\n          \"type\": \"string\"\r\n        }\r\n      ],\r\n      \"stateMutability\": \"view\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"tokenId\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"name\": \"ownerOf\",\r\n      \"outputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"\",\r\n          \"type\": \"address\"\r\n        }\r\n      ],\r\n      \"stateMutability\": \"view\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"from\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"to\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"tokenId\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"name\": \"safeTransferFrom\",\r\n      \"outputs\": [],\r\n      \"stateMutability\": \"nonpayable\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"from\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"to\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"tokenId\",\r\n          \"type\": \"uint256\"\r\n        },\r\n        {\r\n          \"internalType\": \"bytes\",\r\n          \"name\": \"_data\",\r\n          \"type\": \"bytes\"\r\n        }\r\n      ],\r\n      \"name\": \"safeTransferFrom\",\r\n      \"outputs\": [],\r\n      \"stateMutability\": \"nonpayable\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"operator\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"internalType\": \"bool\",\r\n          \"name\": \"approved\",\r\n          \"type\": \"bool\"\r\n        }\r\n      ],\r\n      \"name\": \"setApprovalForAll\",\r\n      \"outputs\": [],\r\n      \"stateMutability\": \"nonpayable\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"bytes4\",\r\n          \"name\": \"interfaceId\",\r\n          \"type\": \"bytes4\"\r\n        }\r\n      ],\r\n      \"name\": \"supportsInterface\",\r\n      \"outputs\": [\r\n        {\r\n          \"internalType\": \"bool\",\r\n          \"name\": \"\",\r\n          \"type\": \"bool\"\r\n        }\r\n      ],\r\n      \"stateMutability\": \"view\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [],\r\n      \"name\": \"symbol\",\r\n      \"outputs\": [\r\n        {\r\n          \"internalType\": \"string\",\r\n          \"name\": \"\",\r\n          \"type\": \"string\"\r\n        }\r\n      ],\r\n      \"stateMutability\": \"view\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"tokenId\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"name\": \"tokenURI\",\r\n      \"outputs\": [\r\n        {\r\n          \"internalType\": \"string\",\r\n          \"name\": \"\",\r\n          \"type\": \"string\"\r\n        }\r\n      ],\r\n      \"stateMutability\": \"view\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"from\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"to\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"tokenId\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"name\": \"transferFrom\",\r\n      \"outputs\": [],\r\n      \"stateMutability\": \"nonpayable\",\r\n      \"type\": \"function\"\r\n    }\r\n  ]\r\n}","export default function bytecode()\r\n{\r\n    return \"0x60806040523480156200001157600080fd5b5060405162002f5e38038062002f5e833981810160405281019062000037919062000645565b828281600090805190602001906200005192919062000393565b5080600190805190602001906200006a92919062000393565b50505060006001905081600790805190602001906200008b92919062000393565b506200009e8582620000bb60201b60201c565b620000b08183620002a160201b60201c565b50505050506200099c565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156200012e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001259062000775565b60405180910390fd5b6200013f816200032260201b60201c565b1562000182576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200017990620007e7565b60405180910390fd5b62000196600083836200038e60201b60201c565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254620001e8919062000842565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b620002b2826200032260201b60201c565b620002f4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002eb9062000915565b60405180910390fd5b806006600084815260200190815260200160002090805190602001906200031d92919062000393565b505050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b828054620003a19062000966565b90600052602060002090601f016020900481019282620003c5576000855562000411565b82601f10620003e057805160ff191683800117855562000411565b8280016001018555821562000411579182015b8281111562000410578251825591602001919060010190620003f3565b5b50905062000420919062000424565b5090565b5b808211156200043f57600081600090555060010162000425565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620004848262000457565b9050919050565b620004968162000477565b8114620004a257600080fd5b50565b600081519050620004b6816200048b565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200051182620004c6565b810181811067ffffffffffffffff82111715620005335762000532620004d7565b5b80604052505050565b60006200054862000443565b905062000556828262000506565b919050565b600067ffffffffffffffff821115620005795762000578620004d7565b5b6200058482620004c6565b9050602081019050919050565b60005b83811015620005b157808201518184015260208101905062000594565b83811115620005c1576000848401525b50505050565b6000620005de620005d8846200055b565b6200053c565b905082815260208101848484011115620005fd57620005fc620004c1565b5b6200060a84828562000591565b509392505050565b600082601f8301126200062a5762000629620004bc565b5b81516200063c848260208601620005c7565b91505092915050565b600080600080608085870312156200066257620006616200044d565b5b60006200067287828801620004a5565b945050602085015167ffffffffffffffff81111562000696576200069562000452565b5b620006a48782880162000612565b935050604085015167ffffffffffffffff811115620006c857620006c762000452565b5b620006d68782880162000612565b925050606085015167ffffffffffffffff811115620006fa57620006f962000452565b5b620007088782880162000612565b91505092959194509250565b600082825260208201905092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006200075d60208362000714565b91506200076a8262000725565b602082019050919050565b6000602082019050818103600083015262000790816200074e565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000620007cf601c8362000714565b9150620007dc8262000797565b602082019050919050565b600060208201905081810360008301526200080281620007c0565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200084f8262000809565b91506200085c8362000809565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000894576200089362000813565b5b828201905092915050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000620008fd602e8362000714565b91506200090a826200089f565b604082019050919050565b600060208201905081810360008301526200093081620008ee565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200097f57607f821691505b6020821081141562000996576200099562000937565b5b50919050565b6125b280620009ac6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb46514610224578063b88d4fde14610240578063c87b56dd1461025c578063e985e9c51461028c576100cf565b80636352211e146101a657806370a08231146101d657806395d89b4114610206576100cf565b806301ffc9a7146100d457806306fdde0314610104578063081812fc14610122578063095ea7b31461015257806323b872dd1461016e57806342842e0e1461018a575b600080fd5b6100ee60048036038101906100e9919061157b565b6102bc565b6040516100fb91906115c3565b60405180910390f35b61010c61039e565b6040516101199190611677565b60405180910390f35b61013c600480360381019061013791906116cf565b610430565b604051610149919061173d565b60405180910390f35b61016c60048036038101906101679190611784565b6104b5565b005b610188600480360381019061018391906117c4565b6105cd565b005b6101a4600480360381019061019f91906117c4565b61062d565b005b6101c060048036038101906101bb91906116cf565b61064d565b6040516101cd919061173d565b60405180910390f35b6101f060048036038101906101eb9190611817565b6106ff565b6040516101fd9190611853565b60405180910390f35b61020e6107b7565b60405161021b9190611677565b60405180910390f35b61023e6004803603810190610239919061189a565b610849565b005b61025a60048036038101906102559190611a0f565b61085f565b005b610276600480360381019061027191906116cf565b6108c1565b6040516102839190611677565b60405180910390f35b6102a660048036038101906102a19190611a92565b610a13565b6040516102b391906115c3565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061038757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610397575061039682610aa7565b5b9050919050565b6060600080546103ad90611b01565b80601f01602080910402602001604051908101604052809291908181526020018280546103d990611b01565b80156104265780601f106103fb57610100808354040283529160200191610426565b820191906000526020600020905b81548152906001019060200180831161040957829003601f168201915b5050505050905090565b600061043b82610b11565b61047a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047190611ba5565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006104c08261064d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610531576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052890611c37565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610550610b7d565b73ffffffffffffffffffffffffffffffffffffffff16148061057f575061057e81610579610b7d565b610a13565b5b6105be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b590611cc9565b60405180910390fd5b6105c88383610b85565b505050565b6105de6105d8610b7d565b82610c3e565b61061d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061490611d5b565b60405180910390fd5b610628838383610d1c565b505050565b6106488383836040518060200160405280600081525061085f565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156106f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ed90611ded565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610770576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076790611e7f565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600180546107c690611b01565b80601f01602080910402602001604051908101604052809291908181526020018280546107f290611b01565b801561083f5780601f106108145761010080835404028352916020019161083f565b820191906000526020600020905b81548152906001019060200180831161082257829003601f168201915b5050505050905090565b61085b610854610b7d565b8383610f78565b5050565b61087061086a610b7d565b83610c3e565b6108af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a690611d5b565b60405180910390fd5b6108bb848484846110e5565b50505050565b60606108cc82610b11565b61090b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090290611f11565b60405180910390fd5b600060066000848152602001908152602001600020805461092b90611b01565b80601f016020809104026020016040519081016040528092919081815260200182805461095790611b01565b80156109a45780601f10610979576101008083540402835291602001916109a4565b820191906000526020600020905b81548152906001019060200180831161098757829003601f168201915b5050505050905060006109b5611141565b90506000815114156109cb578192505050610a0e565b600082511115610a005780826040516020016109e8929190611f6d565b60405160208183030381529060405292505050610a0e565b610a0984611158565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610bf88361064d565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610c4982610b11565b610c88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7f90612003565b60405180910390fd5b6000610c938361064d565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610d0257508373ffffffffffffffffffffffffffffffffffffffff16610cea84610430565b73ffffffffffffffffffffffffffffffffffffffff16145b80610d135750610d128185610a13565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610d3c8261064d565b73ffffffffffffffffffffffffffffffffffffffff1614610d92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8990612095565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610e02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df990612127565b60405180910390fd5b610e0d8383836111ff565b610e18600082610b85565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e689190612176565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ebf91906121aa565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610fe7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fde9061224c565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516110d891906115c3565b60405180910390a3505050565b6110f0848484610d1c565b6110fc84848484611204565b61113b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611132906122de565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606061116382610b11565b6111a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119990612370565b60405180910390fd5b60006111ac611141565b905060008151116111cc57604051806020016040528060008152506111f7565b806111d68461139b565b6040516020016111e7929190611f6d565b6040516020818303038152906040525b915050919050565b505050565b60006112258473ffffffffffffffffffffffffffffffffffffffff166114fc565b1561138e578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261124e610b7d565b8786866040518563ffffffff1660e01b815260040161127094939291906123e5565b602060405180830381600087803b15801561128a57600080fd5b505af19250505080156112bb57506040513d601f19601f820116820180604052508101906112b89190612446565b60015b61133e573d80600081146112eb576040519150601f19603f3d011682016040523d82523d6000602084013e6112f0565b606091505b50600081511415611336576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132d906122de565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611393565b600190505b949350505050565b606060008214156113e3576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506114f7565b600082905060005b600082146114155780806113fe90612473565b915050600a8261140e91906124eb565b91506113eb565b60008167ffffffffffffffff811115611431576114306118e4565b5b6040519080825280601f01601f1916602001820160405280156114635781602001600182028036833780820191505090505b5090505b600085146114f05760018261147c9190612176565b9150600a8561148b919061251c565b603061149791906121aa565b60f81b8183815181106114ad576114ac61254d565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856114e991906124eb565b9450611467565b8093505050505b919050565b600080823b905060008111915050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61155881611523565b811461156357600080fd5b50565b6000813590506115758161154f565b92915050565b60006020828403121561159157611590611519565b5b600061159f84828501611566565b91505092915050565b60008115159050919050565b6115bd816115a8565b82525050565b60006020820190506115d860008301846115b4565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156116185780820151818401526020810190506115fd565b83811115611627576000848401525b50505050565b6000601f19601f8301169050919050565b6000611649826115de565b61165381856115e9565b93506116638185602086016115fa565b61166c8161162d565b840191505092915050565b60006020820190508181036000830152611691818461163e565b905092915050565b6000819050919050565b6116ac81611699565b81146116b757600080fd5b50565b6000813590506116c9816116a3565b92915050565b6000602082840312156116e5576116e4611519565b5b60006116f3848285016116ba565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611727826116fc565b9050919050565b6117378161171c565b82525050565b6000602082019050611752600083018461172e565b92915050565b6117618161171c565b811461176c57600080fd5b50565b60008135905061177e81611758565b92915050565b6000806040838503121561179b5761179a611519565b5b60006117a98582860161176f565b92505060206117ba858286016116ba565b9150509250929050565b6000806000606084860312156117dd576117dc611519565b5b60006117eb8682870161176f565b93505060206117fc8682870161176f565b925050604061180d868287016116ba565b9150509250925092565b60006020828403121561182d5761182c611519565b5b600061183b8482850161176f565b91505092915050565b61184d81611699565b82525050565b60006020820190506118686000830184611844565b92915050565b611877816115a8565b811461188257600080fd5b50565b6000813590506118948161186e565b92915050565b600080604083850312156118b1576118b0611519565b5b60006118bf8582860161176f565b92505060206118d085828601611885565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61191c8261162d565b810181811067ffffffffffffffff8211171561193b5761193a6118e4565b5b80604052505050565b600061194e61150f565b905061195a8282611913565b919050565b600067ffffffffffffffff82111561197a576119796118e4565b5b6119838261162d565b9050602081019050919050565b82818337600083830152505050565b60006119b26119ad8461195f565b611944565b9050828152602081018484840111156119ce576119cd6118df565b5b6119d9848285611990565b509392505050565b600082601f8301126119f6576119f56118da565b5b8135611a0684826020860161199f565b91505092915050565b60008060008060808587031215611a2957611a28611519565b5b6000611a378782880161176f565b9450506020611a488782880161176f565b9350506040611a59878288016116ba565b925050606085013567ffffffffffffffff811115611a7a57611a7961151e565b5b611a86878288016119e1565b91505092959194509250565b60008060408385031215611aa957611aa8611519565b5b6000611ab78582860161176f565b9250506020611ac88582860161176f565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611b1957607f821691505b60208210811415611b2d57611b2c611ad2565b5b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000611b8f602c836115e9565b9150611b9a82611b33565b604082019050919050565b60006020820190508181036000830152611bbe81611b82565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000611c216021836115e9565b9150611c2c82611bc5565b604082019050919050565b60006020820190508181036000830152611c5081611c14565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b6000611cb36038836115e9565b9150611cbe82611c57565b604082019050919050565b60006020820190508181036000830152611ce281611ca6565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b6000611d456031836115e9565b9150611d5082611ce9565b604082019050919050565b60006020820190508181036000830152611d7481611d38565b9050919050565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b6000611dd76029836115e9565b9150611de282611d7b565b604082019050919050565b60006020820190508181036000830152611e0681611dca565b9050919050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000611e69602a836115e9565b9150611e7482611e0d565b604082019050919050565b60006020820190508181036000830152611e9881611e5c565b9050919050565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b6000611efb6031836115e9565b9150611f0682611e9f565b604082019050919050565b60006020820190508181036000830152611f2a81611eee565b9050919050565b600081905092915050565b6000611f47826115de565b611f518185611f31565b9350611f618185602086016115fa565b80840191505092915050565b6000611f798285611f3c565b9150611f858284611f3c565b91508190509392505050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000611fed602c836115e9565b9150611ff882611f91565b604082019050919050565b6000602082019050818103600083015261201c81611fe0565b9050919050565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b600061207f6029836115e9565b915061208a82612023565b604082019050919050565b600060208201905081810360008301526120ae81612072565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006121116024836115e9565b915061211c826120b5565b604082019050919050565b6000602082019050818103600083015261214081612104565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061218182611699565b915061218c83611699565b92508282101561219f5761219e612147565b5b828203905092915050565b60006121b582611699565b91506121c083611699565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156121f5576121f4612147565b5b828201905092915050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006122366019836115e9565b915061224182612200565b602082019050919050565b6000602082019050818103600083015261226581612229565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006122c86032836115e9565b91506122d38261226c565b604082019050919050565b600060208201905081810360008301526122f7816122bb565b9050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b600061235a602f836115e9565b9150612365826122fe565b604082019050919050565b600060208201905081810360008301526123898161234d565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006123b782612390565b6123c1818561239b565b93506123d18185602086016115fa565b6123da8161162d565b840191505092915050565b60006080820190506123fa600083018761172e565b612407602083018661172e565b6124146040830185611844565b818103606083015261242681846123ac565b905095945050505050565b6000815190506124408161154f565b92915050565b60006020828403121561245c5761245b611519565b5b600061246a84828501612431565b91505092915050565b600061247e82611699565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156124b1576124b0612147565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006124f682611699565b915061250183611699565b925082612511576125106124bc565b5b828204905092915050565b600061252782611699565b915061253283611699565b925082612542576125416124bc565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212206277b218f3fcb14ec2240160eefa79ae1951bb2625b80e282d36041a588df51b64736f6c63430008090033\"\r\n}","import React, { Component } from 'react';\r\nimport {Button, View} from 'react-native'; \r\n\r\n\r\n\r\nclass HomePage extends Component {\r\n\r\n  \r\n\r\n  render() {\r\n    return (\r\n      \r\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\r\n  \r\n      <h1>InterPlanetary 721</h1>\r\n      \r\n      <div class=\"marginButton\">\r\n      <Button\r\n      title=\"Mint an Image\"\r\n      onPress={() => this.props.navigation.navigate('Image')}\r\n      />\r\n      </div>\r\n      <div class=\"marginTitle\"> This website uses the following (works only on in the Goerli testnetwork for the moment):</div>\r\n        <ul>\r\n          <li>Hardhat instead of Truffle</li>\r\n          <li>Ether.js instead of Web3.js</li>\r\n          <li>IPFS (Inter Planetary File System)</li>\r\n          <li>ERC721 contracts</li>\r\n          <li>OpenZeppelin</li>\r\n          <li>OpenSea API</li>\r\n          <li>MetaMask</li>\r\n        </ul>\r\n        <div class=\"marginTitle\"> Previous verisons of this project were not OpenSea or MetaMask compatible:</div>\r\n      <div>Imporant Links:</div>\r\n\r\n        <ul>\r\n          <li><a href=\"https://www.linkedin.com/in/jared-samonte-9b9192157/\">LinkedIn Account</a></li>\r\n          <li><a href=\"https://github.com/jared-v-samonte/InterPlan721\">GitHub Repository</a></li>\r\n          <li><a href=\"https://jared-v-samonte.github.io/IPFS-NFTs-project/\">Previous Version</a></li>\r\n        </ul>\r\n      </View>\r\n      \r\n    )\r\n  }\r\n}\r\nexport default HomePage;","import React, {Component} from 'react';\r\nimport { createAppContainer } from \"react-navigation\";\r\nimport {createStackNavigator} from \"react-navigation-stack\";\r\nimport './App.css';\r\nimport ImageViewer from './ImageViewer.js'\r\n//import VideoViewer from './VideoViewer.js'\r\n//import AudioListener from './AudioListener.js'\r\nimport HomePage from './HomePage.js'\r\n\r\n\r\n\r\nclass App extends Component {\r\n  render() \r\n  {\r\n    return(\r\n      <AppContainer />\r\n    )\r\n  }\r\n}\r\n\r\n\r\nconst AppNavigator = createStackNavigator({\r\n  Home: {\r\n    screen: HomePage\r\n  },\r\n  Image: {\r\n    screen: ImageViewer\r\n  }\r\n});\r\n\r\n\r\nconst AppContainer = createAppContainer(AppNavigator);\r\n\r\nexport default App\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport App from './components/App.js';\r\nimport * as serviceWorker from './serviceWorker.js';\r\nimport BrowserRouter from 'react-router-dom/BrowserRouter'\r\n\r\n\r\n\r\n\r\nconst root = document.getElementById('root')\r\n\r\nif (root != null) {\r\n  ReactDOM.render((\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n      <App />\r\n    </BrowserRouter>\r\n ), root)\r\n}\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n\r\n"],"sourceRoot":""}